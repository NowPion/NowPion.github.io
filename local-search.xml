<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>页面刷新后cookie消失的bug</title>
    <link href="/2025/11/01/%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E5%90%8Ecookie%E6%B6%88%E5%A4%B1%E7%9A%84bug/"/>
    <url>/2025/11/01/%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E5%90%8Ecookie%E6%B6%88%E5%A4%B1%E7%9A%84bug/</url>
    
    <content type="html"><![CDATA[<h1 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h1><p>今天在用 Cookie 做登录态时遇到一个诡异问题：刷新页面后，Cookie 自动消失；并且再次发起请求也不携带 Cookie。</p><hr><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> userApi = &#123;<br>  <span class="hljs-comment">// 发送登录验证码</span><br>  <span class="hljs-title function_">sendLoginCode</span>(<span class="hljs-params">phone</span>) &#123;<br>    <span class="hljs-keyword">return</span> api.<span class="hljs-title function_">postForm</span>(<span class="hljs-string">&#x27;/userLogin/sendLoginCode&#x27;</span>, &#123; phone &#125;)<br>  &#125;,<br><br>  <span class="hljs-comment">// 手机号+验证码登录</span><br>  <span class="hljs-title function_">login</span>(<span class="hljs-params">phone, code</span>) &#123;<br>    <span class="hljs-keyword">return</span> api.<span class="hljs-title function_">postForm</span>(<span class="hljs-string">&#x27;/userLogin/login&#x27;</span>, &#123; phone, code &#125;)<br>  &#125;,<br>&#125;<br><span class="hljs-comment">//在发送完请求后成功获取了cookie</span><br></code></pre></td></tr></table></figure><p><img src="https://newpon.top/PicGo/image-20251101171555217.png" alt="image-20251101171555217"></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">现象：<br><span class="hljs-bullet">- </span>发送新的请求并不会携带 Cookie<br><span class="hljs-bullet">- </span>页面刷新后 Cookie 就会消失<br></code></pre></td></tr></table></figure><hr><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p><img src="https://newpon.top/PicGo/image-20251101172152297.png" alt="image-20251101172152297"></p><p>浏览器为了提高安全性，要求所有设置了 <code>SameSite=None</code> 的 cookies 都必须使用 <code>Secure</code> 属性，以确保它们仅通过 HTTPS 发送，防止中间人攻击和其他安全漏洞</p><p>进一步说明：</p><ul><li>Chrome 等现代浏览器对 <code>SameSite=None</code> 的 Cookie，如果没有同时设置 <code>Secure</code>，会直接拒绝或在刷新后丢弃。</li><li>本地开发若使用 <code>http://localhost</code>，即使是同源，若你的后端设置了 <code>SameSite=None</code>，也必须配合 <code>Secure</code> 并通过 HTTPS 传输，否则浏览器不予保留&#x2F;发送。</li></ul><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>服务器端正确设置 Cookie（示例以 Node.js&#x2F;Express）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 服务器: 设置登录态 Cookie</span><br>res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&#x27;token&#x27;</span>, token, &#123;<br>  <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,      <span class="hljs-comment">// 避免 JS 访问，降低 XSS 风险</span><br>  <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,        <span class="hljs-comment">// 只在 HTTPS 下发送（SameSite=None 必须搭配）</span><br>  <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;None&#x27;</span>,    <span class="hljs-comment">// 跨站请求需要携带 Cookie</span><br>  <span class="hljs-attr">maxAge</span>: <span class="hljs-number">7</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>, <span class="hljs-comment">// 7 天</span><br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>&#125;)<br></code></pre></td></tr></table></figure><p>客户端开启携带凭据（以 Axios 为例）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">withCredentials</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment">// 或者: axios.create(&#123; withCredentials: true &#125;)</span><br><br><span class="hljs-comment">// 发起请求</span><br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;https://api.example.com/userLogin/login&#x27;</span>, &#123; phone, code &#125;)<br></code></pre></td></tr></table></figure><p>服务端 CORS 必须允许携带凭据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Express CORS</span><br><span class="hljs-keyword">import</span> cors <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cors&#x27;</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>(&#123;<br>  <span class="hljs-attr">origin</span>: <span class="hljs-string">&#x27;https://web.example.com&#x27;</span>, <span class="hljs-comment">// 不能用 *，需明确来源</span><br>  <span class="hljs-attr">credentials</span>: <span class="hljs-literal">true</span>,                  <span class="hljs-comment">// 允许凭据（Cookie）</span><br>&#125;))<br><br><span class="hljs-comment">// 或手动设置头</span><br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;https://web.example.com&#x27;</span>)<br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>)<br></code></pre></td></tr></table></figure><p>域与路径设置：</p><ul><li><code>domain</code> 应设置为需要生效的主域或子域，避免跨域不匹配。</li><li><code>path</code> 一般设为 <code>/</code>，否则部分路由下不会发送 Cookie。</li></ul><hr><h2 id="本地开发的可选方案"><a href="#本地开发的可选方案" class="headerlink" title="本地开发的可选方案"></a>本地开发的可选方案</h2><ul><li>使用 HTTPS：通过 Nginx&#x2F;Caddy 反向代理本地服务并签发本地证书（可用 <code>mkcert</code> 信任开发证书）。</li><li>如果暂时无法 HTTPS，又需要跨站携带 Cookie：<ul><li>避免使用 <code>SameSite=None</code>，改为同站开发（前后端同源），或在需要时使用 Token 方案。</li><li>但注意：<code>SameSite=Lax/Strict</code> 在跨站请求场景下通常不会携带 Cookie。</li></ul></li></ul><hr><h2 id="常见坑排查清单"><a href="#常见坑排查清单" class="headerlink" title="常见坑排查清单"></a>常见坑排查清单</h2><ul><li>是否设置了 <code>SameSite=None</code> 却没有 <code>Secure</code>。</li><li>是否启用了 <code>withCredentials</code>，同时服务端 <code>Access-Control-Allow-Credentials: true</code> 且 <code>Allow-Origin</code> 为具体域。</li><li>Cookie 是否为 <code>HttpOnly</code>（JS 不可读），但这不会影响请求是否携带。</li><li>是否设置了 <code>domain</code>&#x2F;<code>path</code> 导致作用域不匹配。</li><li>是否仅为“会话 Cookie”（无 <code>Expires/Max-Age</code>）：刷新通常不丢失，但关闭浏览器会失效。</li><li>是否存在子域&#x2F;端口不同导致跨站。</li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>刷新后 Cookie 消失，往往是因为浏览器的新安全策略：<code>SameSite=None</code> 必须配合 <code>Secure</code> 且通过 HTTPS 传输。配合前端 <code>withCredentials</code> 和服务端正确的 CORS 设置，并确保域与路径匹配，即可稳定保留与携带 Cookie。</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Cookie</tag>
      
      <tag>CORS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 整合支付宝</title>
    <link href="/2025/10/30/SpringBoot%E6%95%B4%E5%90%88%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    <url>/2025/10/30/SpringBoot%E6%95%B4%E5%90%88%E6%94%AF%E4%BB%98%E5%AE%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前提准备"><a href="#一、前提准备" class="headerlink" title="一、前提准备"></a>一、前提准备</h1><p>在开始整合之前，你需要准备以下配置：</p><ul><li><strong>AppID</strong>：支付宝应用唯一标识  </li><li><strong>应用私钥（appPrivateKey）</strong>：自己生成，用于签名  </li><li><strong>支付宝公钥（alipayPublicKey）</strong>：从支付宝开放平台获取  </li><li><strong>应用公钥（appPublicKey）</strong>：配置在支付宝后台  </li><li><strong>异步回调地址（notifyUrl）</strong>：支付成功后支付宝通知的接口  </li><li><strong>支付宝网关地址</strong>（沙箱环境为 <code>https://openapi-sandbox.dl.alipaydev.com/gateway.do</code>）</li></ul><hr><h1 id="二、Maven-依赖"><a href="#二、Maven-依赖" class="headerlink" title="二、Maven 依赖"></a>二、Maven 依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 支付宝 Easy SDK --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alipay.sdk<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>alipay-easysdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 支付宝官方 Java SDK --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alipay.sdk<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>alipay-sdk-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.34.0.ALL<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>💡 推荐使用 <strong>Easy SDK</strong> 进行业务封装，但如需更灵活的控制，可配合官方 SDK 一起使用。</p></blockquote><hr><h1 id="三、配置文件（application-yml）"><a href="#三、配置文件（application-yml）" class="headerlink" title="三、配置文件（application.yml）"></a>三、配置文件（application.yml）</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">alipay:</span><br>  <span class="hljs-attr">appId:</span>           <span class="hljs-comment"># 支付宝应用AppID</span><br>  <span class="hljs-attr">appPrivateKey:</span>   <span class="hljs-comment"># 应用私钥</span><br>  <span class="hljs-attr">alipayPublicKey:</span> <span class="hljs-comment"># 支付宝公钥</span><br>  <span class="hljs-attr">notifyUrl:</span>       <span class="hljs-comment"># 支付成功后的异步回调地址</span><br></code></pre></td></tr></table></figure><hr><h1 id="四、支付宝配置类初始化"><a href="#四、支付宝配置类初始化" class="headerlink" title="四、支付宝配置类初始化"></a>四、支付宝配置类初始化</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;alipay&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliPayConfig</span> &#123;<br>    <span class="hljs-keyword">private</span> String appId;<br>    <span class="hljs-keyword">private</span> String appPrivateKey;<br>    <span class="hljs-keyword">private</span> String alipayPublicKey;<br>    <span class="hljs-keyword">private</span> String notifyUrl;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.protocol = <span class="hljs-string">&quot;https&quot;</span>;<br>        config.gatewayHost = <span class="hljs-string">&quot;openapi.alipaydev.com&quot;</span>; <span class="hljs-comment">// 沙箱网关</span><br>        config.signType = <span class="hljs-string">&quot;RSA2&quot;</span>;<br>        config.appId = <span class="hljs-built_in">this</span>.appId;<br>        config.merchantPrivateKey = <span class="hljs-built_in">this</span>.appPrivateKey;<br>        config.alipayPublicKey = <span class="hljs-built_in">this</span>.alipayPublicKey;<br>        config.notifyUrl = <span class="hljs-built_in">this</span>.notifyUrl;<br>        Factory.setOptions(config);<br>        System.out.println(<span class="hljs-string">&quot;✅ 支付宝SDK初始化成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="五、支付与回调接口"><a href="#五、支付与回调接口" class="headerlink" title="五、支付与回调接口"></a>五、支付与回调接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/alipay&quot;)</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliPayController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> AliPayConfig aliPayConfig;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">GATEWAY_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://openapi-sandbox.dl.alipaydev.com/gateway.do&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FORMAT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;JSON&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CHARSET</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;utf-8&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SIGN_TYPE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;RSA2&quot;</span>;<br><br>    <span class="hljs-comment">/** 获取支付二维码 **/</span><br>    <span class="hljs-meta">@GetMapping(&quot;/pay&quot;)</span> <span class="hljs-comment">// /alipay/pay?subject=测试订单&amp;traceNo=123456&amp;totalAmount=0.01</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">pay</span><span class="hljs-params">(AliPay aliPay)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">AlipayClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAlipayClient</span>(<br>                GATEWAY_URL,<br>                aliPayConfig.getAppId(),<br>                aliPayConfig.getAppPrivateKey(),<br>                FORMAT,<br>                CHARSET,<br>                aliPayConfig.getAlipayPublicKey(),<br>                SIGN_TYPE<br>        );<br><br>        <span class="hljs-type">AlipayTradePrecreateRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayTradePrecreateRequest</span>();<br>        <span class="hljs-type">AlipayTradePrecreateModel</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayTradePrecreateModel</span>();<br>        model.setOutTradeNo(aliPay.getTraceNo());<br>        model.setSubject(aliPay.getSubject());<br>        model.setTotalAmount(String.valueOf(aliPay.getTotalAmount()));<br>        request.setBizModel(model);<br>        request.setNotifyUrl(aliPayConfig.getNotifyUrl());<br><br>        <span class="hljs-type">AlipayTradePrecreateResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.execute(request);<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br><br>    <span class="hljs-comment">/** 支付宝异步通知回调 **/</span><br>    <span class="hljs-meta">@PostMapping(&quot;/notify&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">notify</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;TRADE_SUCCESS&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;trade_status&quot;</span>))) &#123;<br>            System.out.println(<span class="hljs-string">&quot;========= 支付宝异步回调 =========&quot;</span>);<br><br>            Map&lt;String, String&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            request.getParameterMap().forEach((k, v) -&gt; params.put(k, v[<span class="hljs-number">0</span>]));<br><br>            <span class="hljs-keyword">if</span> (Factory.Payment.Common().verifyNotify(params)) &#123;<br>                <span class="hljs-comment">// ✅ 验签通过</span><br>                System.out.println(<span class="hljs-string">&quot;交易名称: &quot;</span> + params.get(<span class="hljs-string">&quot;subject&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;交易状态: &quot;</span> + params.get(<span class="hljs-string">&quot;trade_status&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;支付宝交易凭证号: &quot;</span> + params.get(<span class="hljs-string">&quot;trade_no&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;商户订单号: &quot;</span> + params.get(<span class="hljs-string">&quot;out_trade_no&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;交易金额: &quot;</span> + params.get(<span class="hljs-string">&quot;total_amount&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;买家ID: &quot;</span> + params.get(<span class="hljs-string">&quot;buyer_id&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;付款时间: &quot;</span> + params.get(<span class="hljs-string">&quot;gmt_payment&quot;</span>));<br>                <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 更新订单状态为“已支付”</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="六、生成支付二维码"><a href="#六、生成支付二维码" class="headerlink" title="六、生成支付二维码"></a>六、生成支付二维码</h1><p>返回的 JSON 数据中会包含一个 <code>qrCode</code> 字段，<br>可使用第三方工具（如 <code>ZXing</code>）生成二维码进行扫码支付。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">qrCode</span> <span class="hljs-operator">=</span> response.getQrCode();<br>QRCodeUtil.generate(qrCode, <span class="hljs-string">&quot;alipay_qr.png&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>在支付宝沙箱模式中，你可以使用沙箱钱包 App 扫码模拟支付。</p></blockquote><hr><h1 id="七、常见问题-建议"><a href="#七、常见问题-建议" class="headerlink" title="七、常见问题 &amp; 建议"></a>七、常见问题 &amp; 建议</h1><ol><li><p><strong>测试环境</strong><br>   使用 <a href="https://open.alipay.com/developmentAccess/devSandbox">支付宝开放平台沙箱环境</a> 测试，无需真实支付。  </p></li><li><p><strong>异步通知</strong><br>   回调接口必须为公网可访问地址，否则支付宝无法回调。  </p></li><li><p><strong>密钥安全</strong><br>   请勿在前端或公开仓库暴露私钥信息。  </p></li><li><p><strong>生产环境网关</strong><br>   正式环境网关为 <code>https://openapi.alipay.com/gateway.do</code>。</p></li></ol><hr><h1 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h1><p>本文通过简单的配置和代码实现了：</p><ul><li>支付宝 SDK 初始化  </li><li>生成支付二维码接口  </li><li>异步回调验签逻辑</li></ul><p>至此，一个完整的 <strong>支付宝扫码支付功能</strong> 就整合完成了。<br>如需扩展，可继续实现退款、查询、关闭订单等接口。</p><hr><blockquote><p>✍️ <em>Author: NowPion</em><br>💬 “用代码驱动业务，让支付更简单。”</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
      <tag>支付宝</tag>
      
      <tag>支付集成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx与Caddy</title>
    <link href="/2025/10/25/Nginx%E4%B8%8ECaddy/"/>
    <url>/2025/10/25/Nginx%E4%B8%8ECaddy/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx-与-Caddy：特点、区别与-Docker-部署"><a href="#Nginx-与-Caddy：特点、区别与-Docker-部署" class="headerlink" title="Nginx 与 Caddy：特点、区别与 Docker 部署"></a>Nginx 与 Caddy：特点、区别与 Docker 部署</h1><p>本文面向常见的反向代理与静态站点场景，对比 <strong>Nginx</strong> 与 <strong>Caddy</strong> 的核心特点与差异，并给出在 Windows 环境下使用 <strong>Docker</strong> 的快速部署示例，帮助你按需选择与落地。</p><hr><h2 id="为什么关注"><a href="#为什么关注" class="headerlink" title="为什么关注"></a>为什么关注</h2><ul><li>统一入口：反向代理整合多服务与路由。</li><li>HTTPS 与安全：证书与重定向策略标准化管理。</li><li>性能与稳定：高并发、低资源占用，适合生产环境。</li><li>易用性：配置、热更新与可观测性影响运维效率。</li></ul><hr><h2 id="特点速览"><a href="#特点速览" class="headerlink" title="特点速览"></a>特点速览</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul><li>高性能与低资源占用，成熟生态与广泛应用。</li><li>配置文件（<code>nginx.conf</code>）语法稳定，适合复杂路由与负载均衡。</li><li>反向代理与负载均衡（<code>upstream</code>），静态资源与缓存支持好。</li><li>模块生态丰富（开源&#x2F;商业），社区资料多，排障成本低。</li><li>热重载通过 <code>nginx -s reload</code>，支持零停机更新。</li></ul><h3 id="Caddy"><a href="#Caddy" class="headerlink" title="Caddy"></a>Caddy</h3><ul><li>开箱即用的自动 HTTPS（ACME），证书自动申请与续期。</li><li>简洁的 <code>Caddyfile</code> 配置，支持 JSON 与 Admin API 动态管理。</li><li>反向代理简单（<code>reverse_proxy</code>），内置 HTTP&#x2F;2、HTTP&#x2F;3（QUIC）。</li><li>结构化日志与良好默认安全策略，易于现代化运维。</li><li>插件生态活跃（相对更小），功能覆盖常用站点与网关需求。</li></ul><hr><h2 id="核心区别一览"><a href="#核心区别一览" class="headerlink" title="核心区别一览"></a>核心区别一览</h2><ul><li>配置与管理：<ul><li>Nginx 使用 <code>nginx.conf</code>，灵活但语法偏繁；热重载靠信号。</li><li>Caddy 使用 <code>Caddyfile</code>（或 JSON），更简洁；Admin API 支持在线更新、重载与查询。</li></ul></li><li>HTTPS 与证书：<ul><li>Nginx 需手动申请与配置证书（或脚本自动化）。</li><li>Caddy 自动申请与续期，默认将 HTTP 重定向到 HTTPS（需公网域名与 80&#x2F;443 开放）。</li></ul></li><li>负载均衡：<ul><li>Nginx 提供 <code>upstream</code> 多策略（轮询、最少连接、IP hash）。</li><li>Caddy 在 <code>reverse_proxy</code> 中内置多后端与健康检查，配置更直观。</li></ul></li><li>性能与资源：<ul><li>两者都非常高效；Nginx 更“工业化”、内存占用更小。</li><li>Caddy 默认启用现代协议与安全特性，整体开销略高但配置更省心。</li></ul></li><li>可观测性：<ul><li>Nginx 日志与 <code>stub_status</code>（或第三方模块）常用。</li><li>Caddy 日志结构化，Admin API&#x2F;JSON 状态便于集成。</li></ul></li></ul><p>选择建议：</p><ul><li>追求“稳、广、细控”用 Nginx；追求“快搭建、自动 HTTPS、简配置”用 Caddy。</li></ul><hr><h2 id="使用-Docker-部署-Nginx"><a href="#使用-Docker-部署-Nginx" class="headerlink" title="使用 Docker 部署 Nginx"></a>使用 Docker 部署 Nginx</h2><p>以下示例基于 <strong>Docker Desktop for Windows</strong>。</p><h3 id="1）运行容器（挂载配置与静态目录）"><a href="#1）运行容器（挂载配置与静态目录）" class="headerlink" title="1）运行容器（挂载配置与静态目录）"></a>1）运行容器（挂载配置与静态目录）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>  --name nginx \<br>  -p 80:80 -p 443:443 \<br>  -v <span class="hljs-string">&quot;h:/data/nginx/conf:/etc/nginx&quot;</span> \<br>  -v <span class="hljs-string">&quot;h:/data/nginx/html:/usr/share/nginx/html&quot;</span> \<br>  -v <span class="hljs-string">&quot;h:/data/nginx/certs:/etc/nginx/certs&quot;</span> \<br>  nginx:stable<br></code></pre></td></tr></table></figure><ul><li><code>conf</code>：放置 <code>nginx.conf</code> 与 <code>conf.d/*.conf</code>。</li><li><code>html</code>：站点静态文件目录。</li><li><code>certs</code>：证书与私钥（用于 HTTPS）。</li></ul><h3 id="2）最小配置示例（反向代理-静态）"><a href="#2）最小配置示例（反向代理-静态）" class="headerlink" title="2）最小配置示例（反向代理 + 静态）"></a>2）最小配置示例（反向代理 + 静态）</h3><p><code>h:/data/nginx/conf/nginx.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-attribute">sendfile</span>      <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment"># 静态站点</span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span> example.local;<br><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>  /usr/share/nginx/html;<br>            <span class="hljs-attribute">index</span> index.html;<br>        &#125;<br><br>        <span class="hljs-comment"># 反向代理到后端服务</span><br>        <span class="hljs-section">location</span> /api/ &#123;<br>            <span class="hljs-attribute">proxy_pass</span> http://host.docker.internal:8080/;<br>            <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HTTPS 提示：</p><ul><li>生产环境需在 <code>server</code> 中配置 <code>listen 443 ssl;</code>、证书路径与安全套件。</li><li>可配合 <code>Let’s Encrypt</code>&#x2F;<code>acme.sh</code> 自动化证书申请。</li></ul><h3 id="3）Docker-Compose（推荐）"><a href="#3）Docker-Compose（推荐）" class="headerlink" title="3）Docker Compose（推荐）"></a>3）Docker Compose（推荐）</h3><p><code>docker-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">nginx:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:stable</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/nginx/conf:/etc/nginx</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/nginx/html:/usr/share/nginx/html</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/nginx/certs:/etc/nginx/certs</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br></code></pre></td></tr></table></figure><p>运维常用：</p><ul><li>重载配置：<code>docker exec nginx nginx -s reload</code></li><li>查看日志：<code>docker logs -f nginx</code></li></ul><hr><h2 id="使用-Docker-部署-Caddy"><a href="#使用-Docker-部署-Caddy" class="headerlink" title="使用 Docker 部署 Caddy"></a>使用 Docker 部署 Caddy</h2><h3 id="1）运行容器（挂载-Caddyfile-与数据目录）"><a href="#1）运行容器（挂载-Caddyfile-与数据目录）" class="headerlink" title="1）运行容器（挂载 Caddyfile 与数据目录）"></a>1）运行容器（挂载 Caddyfile 与数据目录）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>  --name caddy \<br>  -p 80:80 -p 443:443 -p 2019:2019 \<br>  -v <span class="hljs-string">&quot;h:/data/caddy/Caddyfile:/etc/caddy/Caddyfile&quot;</span> \<br>  -v <span class="hljs-string">&quot;h:/data/caddy/site:/srv&quot;</span> \<br>  -v <span class="hljs-string">&quot;h:/data/caddy/data:/data&quot;</span> \<br>  -v <span class="hljs-string">&quot;h:/data/caddy/config:/config&quot;</span> \<br>  caddy:2<br></code></pre></td></tr></table></figure><ul><li><code>Caddyfile</code>：核心配置文件。</li><li><code>site</code>：静态文件目录（配合 <code>file_server</code>）。</li><li><code>2019</code>：Admin API（可用于热更新与状态查询）。</li><li><code>data/config</code>：证书与运行时配置持久化（自动 HTTPS 需要）。</li></ul><h3 id="2）最小配置示例"><a href="#2）最小配置示例" class="headerlink" title="2）最小配置示例"></a>2）最小配置示例</h3><p><code>h:/data/caddy/Caddyfile</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs caddy"># 站点 + 自动 HTTPS（需公网 DNS 指向本机）<br>example.com &#123;<br>    # 静态站点<br>    root * /srv<br>    file_server<br><br>    # 反向代理<br>    reverse_proxy host.docker.internal:8080<br>&#125;<br><br># 本地开发（不申请证书）<br>:80 &#123;<br>    root * /srv<br>    file_server<br>    reverse_proxy host.docker.internal:8080<br>&#125;<br></code></pre></td></tr></table></figure><p>热重载：</p><ul><li>通过 Admin API：<code>curl -X POST localhost:2019/load -H &quot;Content-Type: text/caddyfile&quot; --data-binary @/etc/caddy/Caddyfile</code></li><li>或直接：<code>docker exec caddy caddy reload --config /etc/caddy/Caddyfile</code></li></ul><h3 id="3）Docker-Compose（推荐）-1"><a href="#3）Docker-Compose（推荐）-1" class="headerlink" title="3）Docker Compose（推荐）"></a>3）Docker Compose（推荐）</h3><p><code>docker-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">caddy:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">caddy:2</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">caddy</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;2019:2019&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/caddy/Caddyfile:/etc/caddy/Caddyfile</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/caddy/site:/srv</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/caddy/data:/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/caddy/config:/config</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br></code></pre></td></tr></table></figure><p>注意事项：</p><ul><li>自动 HTTPS 需要可解析的域名与 80&#x2F;443 外网连通；内网或本地开发可使用 <code>:80</code> 监听或 <code>tls internal</code>。</li><li>Windows 挂载路径需在 Docker Desktop 中共享并允许访问对应磁盘。</li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Nginx 更适合在需要精细化控制、资源占用更小、生态更成熟的场景中使用。</li><li>Caddy 更适合快速交付、自动 HTTPS、现代协议与简单配置的场景。</li><li>两者都可通过 Docker 在 Windows 环境快速部署；建议使用 Compose 管理配置与数据持久化，并结合反向代理与静态站点需求选择合适的方案。</li></ul><p>—— <em>NowPion</em></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>Caddy</tag>
      
      <tag>Docker</tag>
      
      <tag>反向代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL特点与安装</title>
    <link href="/2025/10/25/Postgresql%E7%89%B9%E7%82%B9%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <url>/2025/10/25/Postgresql%E7%89%B9%E7%82%B9%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="PostgreSQL-特点与安装（Docker）"><a href="#PostgreSQL-特点与安装（Docker）" class="headerlink" title="PostgreSQL 特点与安装（Docker）"></a>PostgreSQL 特点与安装（Docker）</h1><p>近期项目将采用 <strong>PostgreSQL</strong> 作为核心数据库。本文概述 PostgreSQL 的关键特性，并给出在 Windows 环境下使用 <strong>Docker</strong> 的快速安装与常用运维示例，帮助你低成本、可重复地完成本地或测试环境搭建。</p><hr><h2 id="为什么选择-PostgreSQL"><a href="#为什么选择-PostgreSQL" class="headerlink" title="为什么选择 PostgreSQL"></a>为什么选择 PostgreSQL</h2><ul><li>开源且企业级：遵循 SQL 标准、功能完整、社区活跃。</li><li>强一致事务：ACID + MVCC 支持高并发读写且保证一致性。</li><li>丰富数据类型：<code>JSON/JSONB</code>、数组、地理空间（PostGIS）等丰富类型。</li><li>强大索引：<code>B-Tree</code>、<code>Hash</code>、<code>GIN</code>、<code>GiST</code>、<code>BRIN</code> 覆盖多场景查询。</li><li>可扩展生态：扩展、插件和函数众多，适合复杂业务与数据分析。</li><li>跨平台：Linux、macOS、Windows 通过 Docker 一致部署与运维。</li></ul><hr><h2 id="核心特性速览"><a href="#核心特性速览" class="headerlink" title="核心特性速览"></a>核心特性速览</h2><ul><li>事务与并发：MVCC 无锁读、事务隔离级别可配，适合高并发业务。</li><li>JSONB：原生支持文档型数据与索引，兼顾结构化与半结构化场景。</li><li>分区与复制：表分区、逻辑复制、流复制，适合大表与高可用方案。</li><li>扩展生态：<code>pg_stat_statements</code>（性能分析）、<code>PostGIS</code>（GIS）、<code>uuid-ossp</code>（UUID）等。</li><li>索引多样性：<code>GIN</code> 适合全文检索&#x2F;JSON，<code>GiST</code> 适合范围或空间，<code>BRIN</code> 适合超大顺序数据。</li></ul><hr><h2 id="知识点详解"><a href="#知识点详解" class="headerlink" title="知识点详解"></a>知识点详解</h2><h3 id="架构与存储"><a href="#架构与存储" class="headerlink" title="架构与存储"></a>架构与存储</h3><ul><li>进程模型：主进程（<code>postmaster</code>&#x2F;<code>postgres</code>）+ 每连接一个后台进程；辅助进程负责 <code>WAL Writer</code>、<code>Background Writer</code>、<code>Checkpointer</code>、<code>Autovacuum</code> 等。</li><li>数据文件组织：库（<code>base/&lt;db_oid&gt;</code>）→ 表（多个段 <code>relfilenode</code>）→ 8KB 页（Page）→ 行（Tuple）。</li><li>TOAST：大字段（如 <code>TEXT/JSONB</code>）溢出到 TOAST 表，降低主表膨胀与缓冲压力。</li></ul><h3 id="MVCC-与事务隔离级别"><a href="#MVCC-与事务隔离级别" class="headerlink" title="MVCC 与事务隔离级别"></a>MVCC 与事务隔离级别</h3><ul><li>MVCC：行版本 + 可见性规则，读不阻塞写、写不阻塞读。</li><li>隔离级别：<code>Read Committed</code>（默认）、<code>Repeatable Read</code>、<code>Serializable</code>。</li><li>幻读与写偏斜：<code>Serializable</code> 使用 SSI 算法降低异常并发；谨慎选择隔离级别与锁策略。</li></ul><h3 id="WAL-与检查点"><a href="#WAL-与检查点" class="headerlink" title="WAL 与检查点"></a>WAL 与检查点</h3><ul><li>WAL（预写日志）：确保崩溃恢复与复制；顺序写优化 IO。</li><li>Checkpoint：将脏页刷盘并记录 LSN，降低恢复时间；频率与大小影响性能。</li><li>关键参数：<code>wal_level</code>、<code>checkpoint_timeout</code>、<code>max_wal_size</code>、<code>min_wal_size</code>、<code>synchronous_commit</code>。</li></ul><h3 id="锁与并发控制"><a href="#锁与并发控制" class="headerlink" title="锁与并发控制"></a>锁与并发控制</h3><ul><li>行级锁：<code>FOR UPDATE/SHARE</code>；避免长事务持锁。</li><li>表级锁：<code>ACCESS SHARE/EXCLUSIVE</code> 等；DDL 可能触发表级锁。</li><li>死锁分析：<code>pg_locks</code> + 日志；拆分事务、减少相互依赖顺序。</li></ul><h3 id="VACUUM-ANALYZE-与-Autovacuum"><a href="#VACUUM-ANALYZE-与-Autovacuum" class="headerlink" title="VACUUM&#x2F;ANALYZE 与 Autovacuum"></a>VACUUM&#x2F;ANALYZE 与 Autovacuum</h3><ul><li>VACUUM：清理不可见行版本，避免膨胀与 XID wraparound。</li><li>ANALYZE：更新统计信息，提升查询计划质量。</li><li>Autovacuum：自动维护；参数如 <code>autovacuum_vacuum_scale_factor</code>、<code>autovacuum_analyze_scale_factor</code> 与 <code>naptime</code> 需按表规模调优。</li></ul><h3 id="查询优化与执行计划"><a href="#查询优化与执行计划" class="headerlink" title="查询优化与执行计划"></a>查询优化与执行计划</h3><ul><li>使用 <code>EXPLAIN (ANALYZE, BUFFERS)</code> 观察真实耗时与 IO。</li><li>关键算子：<code>Seq Scan</code>、<code>Index Scan</code>、<code>Bitmap Heap/Index Scan</code>、<code>Nested Loop</code>、<code>Hash Join</code>、<code>Merge Join</code>。</li><li>常见优化：合理索引、避免函数对列包裹、分区裁剪、提高选择性统计、限制返回列与行数。</li></ul><h3 id="索引类型与适用场景"><a href="#索引类型与适用场景" class="headerlink" title="索引类型与适用场景"></a>索引类型与适用场景</h3><ul><li><code>B-Tree</code>：通用比较与排序、前缀匹配。</li><li><code>Hash</code>：等值查询；PostgreSQL 现支持 WAL，但总体用得较少。</li><li><code>GIN</code>：倒排索引，适合 <code>JSONB</code>、全文检索、数组包含。</li><li><code>GiST</code>：范围、空间、相似度；配合 PostGIS、trigram 相似度等。</li><li><code>BRIN</code>：超大顺序数据（时间&#x2F;自增 ID），低维护成本。</li><li>部分索引&#x2F;表达式索引：提高特定条件&#x2F;函数查询效率。</li></ul><h3 id="分区表与最佳实践"><a href="#分区表与最佳实践" class="headerlink" title="分区表与最佳实践"></a>分区表与最佳实践</h3><ul><li>范式：<code>RANGE/LIST/HASH</code> 分区；按时间或业务键分区最常见。</li><li>好处：裁剪加速查询、加速归档与维护、降低索引体量。</li><li>注意：主键&#x2F;唯一约束需配合分区键；跨分区更新慎用；统计与 Autovacuum 策略需面向各分区。</li></ul><h3 id="复制与高可用"><a href="#复制与高可用" class="headerlink" title="复制与高可用"></a>复制与高可用</h3><ul><li>物理复制：主从流复制（<code>wal_level=replica</code>）；备库只读。</li><li>逻辑复制：按表级发布&#x2F;订阅；适合数据迁移与异构同步。</li><li>同步与异步：同步复制确保提交安全、牺牲延迟；异步复制性能好但可能丢失极少量事务。</li></ul><h3 id="备份与恢复策略"><a href="#备份与恢复策略" class="headerlink" title="备份与恢复策略"></a>备份与恢复策略</h3><ul><li>逻辑备份：<code>pg_dump/pg_restore</code>，适合结构迁移与小型库备份。</li><li>物理备份：基于数据目录 + WAL（如 <code>pg_basebackup</code>），适合大库与精准时间点恢复（PITR）。</li><li>PITR：通过 <code>restore_command</code> + WAL 归档，定位到指定时间或 LSN。</li></ul><h3 id="权限模型与安全实践"><a href="#权限模型与安全实践" class="headerlink" title="权限模型与安全实践"></a>权限模型与安全实践</h3><ul><li>角色与权限：<code>ROLE</code> 可 <code>LOGIN</code>，通过 <code>GRANT</code> 赋权到对象级（库、模式、表、序列、函数）。</li><li>最小权限原则：应用用户只给所需 DML 权限；分离 DDL 与管理角色。</li><li>安全配置：<code>password_encryption</code>、<code>pg_hba.conf</code> 访问控制、SSL&#x2F;TLS。</li></ul><h3 id="扩展与常用插件"><a href="#扩展与常用插件" class="headerlink" title="扩展与常用插件"></a>扩展与常用插件</h3><ul><li><code>pg_stat_statements</code>：慢查询分析与 SQL 聚合统计。</li><li><code>uuid-ossp</code> 或 <code>pgcrypto</code>：生成&#x2F;处理 UUID。</li><li><code>postgis</code>：GIS 能力；空间索引与空间查询。</li><li><code>pg_trgm</code>：相似度与模糊匹配（支持 <code>%LIKE%</code> 优化与搜索）。</li></ul><h3 id="JSONB-实战技巧"><a href="#JSONB-实战技巧" class="headerlink" title="JSONB 实战技巧"></a>JSONB 实战技巧</h3><ul><li>操作符：<code>-&gt;</code>（取对象）、<code>-&gt;&gt;</code>（文本）、<code>@&gt;</code>（包含）、<code>?</code>（键存在）。</li><li>索引建议：<code>GIN</code> + <code>jsonb_path_ops</code> 提升包含查询；为常用路径建表达式索引。</li></ul><h3 id="时间与时区处理"><a href="#时间与时区处理" class="headerlink" title="时间与时区处理"></a>时间与时区处理</h3><ul><li>使用 <code>TIMESTAMPTZ</code> 存储带时区时间；统一用 UTC 入库、业务层按地区显示。</li><li>设置 <code>TimeZone</code> 与 <code>IntervalStyle</code>，避免夏令时等边界问题。</li></ul><h3 id="管理与调优常见参数"><a href="#管理与调优常见参数" class="headerlink" title="管理与调优常见参数"></a>管理与调优常见参数</h3><ul><li>内存：<code>shared_buffers</code>（25% RAM 起步）、<code>work_mem</code>（按并发控制）、<code>maintenance_work_mem</code>。</li><li>并发：<code>max_connections</code>（配合连接池）、<code>effective_cache_size</code>（估算系统缓存）。</li><li>写入：<code>wal_compression</code>、<code>synchronous_commit</code>、<code>checkpoint_completion_target</code>。</li></ul><h3 id="常用运维命令"><a href="#常用运维命令" class="headerlink" title="常用运维命令"></a>常用运维命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 连接</span><br>psql <span class="hljs-string">&quot;postgres://pguser:pgpass@localhost:5432/demo&quot;</span><br><span class="hljs-comment"># 查看会话与锁</span><br>\conninfo<br>SELECT * FROM pg_stat_activity;<br>SELECT * FROM pg_locks;<br><span class="hljs-comment"># 索引与表统计</span><br>\d+ public.user_profile<br>SELECT * FROM pg_stat_user_tables;<br><span class="hljs-comment"># 执行计划</span><br>EXPLAIN (ANALYZE, BUFFERS) SELECT * FROM public.user_profile WHERE <span class="hljs-built_in">id</span> &lt; 1000;<br></code></pre></td></tr></table></figure><h3 id="psql-常用快捷"><a href="#psql-常用快捷" class="headerlink" title="psql 常用快捷"></a>psql 常用快捷</h3><ul><li><code>\l</code> 列出数据库，<code>\c dbname</code> 切换，<code>\dt</code> 列出表，<code>\di</code> 索引。</li><li><code>\x</code> 切换扩展显示，<code>\timing</code> 打开计时，<code>\watch</code> 循环执行当前查询。</li></ul><hr><h2 id="使用-Docker-安装-PostgreSQL"><a href="#使用-Docker-安装-PostgreSQL" class="headerlink" title="使用 Docker 安装 PostgreSQL"></a>使用 Docker 安装 PostgreSQL</h2><p>以下示例基于 <strong>Docker Desktop for Windows</strong>。</p><h3 id="1）拉取镜像"><a href="#1）拉取镜像" class="headerlink" title="1）拉取镜像"></a>1）拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull postgres:16<br></code></pre></td></tr></table></figure><h3 id="2）启动容器（持久化数据）"><a href="#2）启动容器（持久化数据）" class="headerlink" title="2）启动容器（持久化数据）"></a>2）启动容器（持久化数据）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>  --name postgres16 \<br>  -e POSTGRES_USER=pguser \<br>  -e POSTGRES_PASSWORD=pgpass \<br>  -e POSTGRES_DB=demo \<br>  -e TZ=Asia/Shanghai \<br>  -p 5432:5432 \<br>  -v <span class="hljs-string">&quot;h:/data/postgres:/var/lib/postgresql/data&quot;</span> \<br>  postgres:16<br></code></pre></td></tr></table></figure><ul><li><code>POSTGRES_USER/POSTGRES_PASSWORD/POSTGRES_DB</code>：初始化用户、密码与数据库。</li><li><code>-v h:/data/postgres:/var/lib/postgresql/data</code>：将数据持久化到本地磁盘（确保 Docker Desktop 共享了该盘）。</li><li><code>-p 5432:5432</code>：映射主机端口到容器端口。</li><li><code>TZ</code>：设置时区，便于日志与时间一致。</li></ul><p>查看容器状态与日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br>docker logs -f postgres16<br></code></pre></td></tr></table></figure><h3 id="3）连接测试"><a href="#3）连接测试" class="headerlink" title="3）连接测试"></a>3）连接测试</h3><ul><li>本机工具：<code>psql -h localhost -U pguser -d demo</code>（首次会提示输入密码 <code>pgpass</code>）。</li><li>连接串：<code>postgres://pguser:pgpass@localhost:5432/demo</code>。</li><li>Java&#x2F;JDBC：<code>jdbc:postgresql://localhost:5432/demo</code>。</li></ul><hr><h2 id="使用-Docker-Compose（推荐）"><a href="#使用-Docker-Compose（推荐）" class="headerlink" title="使用 Docker Compose（推荐）"></a>使用 Docker Compose（推荐）</h2><p>在项目根目录新建 <code>docker-compose.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">postgres:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:16</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">postgres16</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">POSTGRES_USER:</span> <span class="hljs-string">pguser</span><br>      <span class="hljs-attr">POSTGRES_PASSWORD:</span> <span class="hljs-string">pgpass</span><br>      <span class="hljs-attr">POSTGRES_DB:</span> <span class="hljs-string">demo</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;5432:5432&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/postgres:/var/lib/postgresql/data</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br></code></pre></td></tr></table></figure><p>启动与关闭：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker compose up -d<br>docker compose down<br></code></pre></td></tr></table></figure><blockquote><p>将数据目录映射为 <code>./data/postgres</code>，便于项目内统一管理。</p></blockquote><hr><h2 id="常用运维示例"><a href="#常用运维示例" class="headerlink" title="常用运维示例"></a>常用运维示例</h2><h3 id="创建用户与数据库"><a href="#创建用户与数据库" class="headerlink" title="创建用户与数据库"></a>创建用户与数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 进入 psql 后执行：</span><br><span class="hljs-keyword">CREATE</span> ROLE appuser <span class="hljs-keyword">WITH</span> LOGIN PASSWORD <span class="hljs-string">&#x27;appPass&#x27;</span> NOSUPERUSER;<br><span class="hljs-keyword">CREATE</span> DATABASE appdb OWNER appuser;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> DATABASE appdb <span class="hljs-keyword">TO</span> appuser;<br></code></pre></td></tr></table></figure><h3 id="基本表与索引"><a href="#基本表与索引" class="headerlink" title="基本表与索引"></a>基本表与索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> public.user_profile (<br>  id         BIGSERIAL <span class="hljs-keyword">PRIMARY KEY</span>,<br>  nickname   TEXT,<br>  attrs      JSONB,<br>  created_at TIMESTAMPTZ <span class="hljs-keyword">DEFAULT</span> NOW()<br>);<br><br><span class="hljs-comment">-- JSONB 的 GIN 索引（适合键值、全文检索等）</span><br><span class="hljs-keyword">CREATE</span> INDEX idx_user_profile_attrs_gin <span class="hljs-keyword">ON</span> public.user_profile <span class="hljs-keyword">USING</span> GIN (attrs);<br></code></pre></td></tr></table></figure><h3 id="备份与恢复（容器内执行）"><a href="#备份与恢复（容器内执行）" class="headerlink" title="备份与恢复（容器内执行）"></a>备份与恢复（容器内执行）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 逻辑备份（导出为 .sql）</span><br>docker <span class="hljs-built_in">exec</span> -t postgres16 pg_dump -U pguser -d demo &gt; demo_backup.sql<br><br><span class="hljs-comment"># 恢复（先创建空库，再执行导入）</span><br>docker <span class="hljs-built_in">exec</span> -i postgres16 psql -U pguser -d demo &lt; demo_backup.sql<br></code></pre></td></tr></table></figure><h3 id="性能与维护建议"><a href="#性能与维护建议" class="headerlink" title="性能与维护建议"></a>性能与维护建议</h3><ul><li>开启并观察 <code>pg_stat_statements</code> 进行慢查询分析。</li><li>合理设置：<code>shared_buffers</code>、<code>work_mem</code>、<code>effective_cache_size</code>（生产环境按资源调优）。</li><li>定期 <code>VACUUM</code>&#x2F;<code>ANALYZE</code> 保持统计信息与空间健康。</li><li>针对大表使用分区与合适的索引类型，避免全表扫描。</li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>PostgreSQL 以强一致事务、丰富索引与扩展生态著称，既能支撑传统 OLTP，也能兼顾文档与分析场景。结合 Docker，可以在本地与测试环境实现快速、可重复的部署与运维。实际落地时，建议评估数据规模与业务特点，合理选择索引与分区策略，并使用 <code>pg_stat_statements</code> 持续优化查询性能。</p><p>—— <em>NowPion</em></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>PostgreSQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小记</title>
    <link href="/2025/10/22/%E5%B0%8F%E8%AE%B0/"/>
    <url>/2025/10/22/%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h1><blockquote><p>这里先不分享技术，想写点最近的心情与一些感悟。<br>愿有缘人看到。</p></blockquote><hr><h2 id="最近的生活"><a href="#最近的生活" class="headerlink" title="最近的生活"></a>最近的生活</h2><p>最近在学校接了一个项目，3q 多拿下，一个 Node.js 全栈项目。<br>但因为对方要把价格砍到 2q，在我跟他论价时，他那边就已经把人找好了。<br>我也没有什么更好的办法，只能接受了——算是更直观地感受到“卷”。<br>这次也提醒我：谈价格之外，更要谈清“需求范围、交付标准与边界”。</p><hr><h2 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h2><p>关于“卷”的几件事——</p><ol><li><p>什么是“卷”：<br>并不是简单的“努力”，而是大家在同一赛道上，投入越来越多，但边际回报却越来越低。教育、职场、互联网行业尤为明显。</p></li><li><p>为什么会“卷”：<br>供需不平衡（岗位少、竞争者多），信息过度透明（人人都能对标最优），以及绩效导向的文化（只看结果、不问过程），共同推动了“强对抗”的环境。</p></li><li><p>“卷”的常见表现：<br>价格战、过度加班、堆证书与项目名词、疲于社交与曝光。很多时候不是为了更好，而是为了“不输”。</p></li><li><p>个体的应对：</p><ul><li>定义边界：清楚自己能承受的工作强度与生活节奏。</li><li>提升稀缺性：少在红海里拼消耗，多在细分领域积累独特经验与作品。</li><li>选择赛道：判断行业的周期与趋势，学会“换道”而不是硬顶。</li><li>复盘与长期主义：用半年、一年的尺度看成长，而不是一两次谈价成败。</li></ul></li><li><p>具体到我的经历：<br>价格被压、对方另找人，这些并不等于“我不值得”，更像是给自己一次再评估与再定位的机会。下一次，不只谈价格，也谈范围、产出与价值证明。</p></li><li><p>一句提醒：<br>卷不可避免，但“怎么卷”可选择。把竞争变成自我打磨，把短期变成长期，把情绪变成方法。</p></li></ol><hr><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>把当下的忙与累化为积累，把短暂的挫败化为经验；继续把作品打磨好，安静做事，认真生活。</p><hr><p><em>记录于 2025年10月</em></p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>生活</tag>
      
      <tag>感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高效分布式ID生成服务代码解析</title>
    <link href="/2025/10/18/%E5%88%86%E5%B8%83%E5%BC%8FID%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2025/10/18/%E5%88%86%E5%B8%83%E5%BC%8FID%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式ID生成"><a href="#分布式ID生成" class="headerlink" title="分布式ID生成"></a>分布式ID生成</h1><p>本文以一个具体 Java 项目代码为例，解析其核心 ID 生成逻辑及设计亮点。<br>旨在帮助开发者理解如何结合本地缓存和异步更新策略，实现高性能的分布式 ID 生成服务。</p><hr><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>该服务提供 <strong>顺序ID</strong> 和 <strong>无序ID</strong> 两种生成方式，支持高并发场景下 ID 快速分配。<br>主要思想是利用本地缓存减少数据库访问压力，通过异步刷新机制实现 ID 区间动态更新，保障 ID 生成的效率与唯一性。</p><hr><h2 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h2><p>核心表 <code>t_id_generate_config</code> 用于存储各业务 ID 配置及号段信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> `t_id_generate_config` (<br> `id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键 id&#x27;</span>,<br> `remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">CHARACTER SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;描述&#x27;</span>,<br> `next_threshold` <span class="hljs-type">bigint</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;当前 id 所在阶段的阈值&#x27;</span>,<br> `init_num` <span class="hljs-type">bigint</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;初始化值&#x27;</span>,<br> `current_start` <span class="hljs-type">bigint</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;当前 id 所在阶段的开始值&#x27;</span>,<br> `step` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;id 递增区间&#x27;</span>,<br> `is_seq` tinyint <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;是否有序（0 无序，1 有序）&#x27;</span>,<br> `id_prefix` <span class="hljs-type">varchar</span>(<span class="hljs-number">60</span>) <span class="hljs-keyword">CHARACTER SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;业务前缀码，如果没有则返回时不携带&#x27;</span>,<br> `version` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;乐观锁版本号&#x27;</span>,<br> `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br> `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br> <span class="hljs-keyword">PRIMARY KEY</span> (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">8</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_unicode_ci;<br></code></pre></td></tr></table></figure><ul><li>使用 <strong>自增主键</strong> 作为唯一标识。</li><li><code>is_seq</code> 标记是否为顺序 ID。</li><li><code>version</code> 用于乐观锁，防止多实例冲突。</li><li><code>current_start</code> 和 <code>next_threshold</code> 定义号段范围。</li></ul><hr><h2 id="核心代码剖析"><a href="#核心代码剖析" class="headerlink" title="核心代码剖析"></a>核心代码剖析</h2><h3 id="1️⃣-本地缓存结构"><a href="#1️⃣-本地缓存结构" class="headerlink" title="1️⃣ 本地缓存结构"></a>1️⃣ 本地缓存结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 顺序ID缓存</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, LocalSeqIdBo&gt; localSeqIdBoMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br><span class="hljs-comment">// 无序ID缓存</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, LocalUnSeqIdBo&gt; localUnSeqIdBoMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><ul><li><strong>顺序ID缓存</strong>维护当前递增计数及区间阈值。</li><li><strong>无序ID缓存</strong>维护一个打乱顺序的 ID 队列，既支持连续 ID 生成，又满足无序需求。</li></ul><hr><h3 id="2️⃣-ID-生成逻辑"><a href="#2️⃣-ID-生成逻辑" class="headerlink" title="2️⃣ ID 生成逻辑"></a>2️⃣ ID 生成逻辑</h3><p><strong>顺序 ID</strong>生成通过调用 <code>incrementAndGet</code> 实现线程安全递增：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">returnId</span> <span class="hljs-operator">=</span> localSeqIdBo.getCurrentNum().incrementAndGet();<br></code></pre></td></tr></table></figure><p><strong>无序 ID</strong>生成通过从本地的 ID 队列中 <code>poll</code> 一个 ID：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Long</span> <span class="hljs-variable">pollId</span> <span class="hljs-operator">=</span> localUnSeqIdBo.getIdQueue().poll();<br></code></pre></td></tr></table></figure><p>两种方式满足不同应用场景的 ID 生成需求。</p><hr><h3 id="3️⃣-异步刷新机制"><a href="#3️⃣-异步刷新机制" class="headerlink" title="3️⃣ 异步刷新机制"></a>3️⃣ 异步刷新机制</h3><p>当缓存 ID 使用进度达到区间的 <strong>75%</strong> 时，代码采用 <strong>信号量 + 线程池</strong> 控制异步刷新 ID 区间，防止多线程并发更新数据库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(localSeqIdBo.getCurrentNum().get() - localSeqIdBo.getCurrentStart() &gt; step * UPDATE_RATE)&#123;<br>    <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> semaphoreMap.get(localSeqIdBo.getId());<br>    <span class="hljs-keyword">if</span>(semaphore.tryAcquire())&#123;<br>        threadPoolExecutor.execute(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                tryUpdateMysqlRecord(idGenerateMapper.selectById(localSeqIdBo.getId()));<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                LOGGER.error(<span class="hljs-string">&quot;同步失败&quot;</span>, e);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                semaphoreMap.get(localSeqIdBo.getId()).release();<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>异步更新提升响应速度。</li><li>信号量保证更新单一性，避免多线程冲突。</li></ul><hr><h3 id="4️⃣-并发控制与线程池"><a href="#4️⃣-并发控制与线程池" class="headerlink" title="4️⃣ 并发控制与线程池"></a>4️⃣ 并发控制与线程池</h3><ul><li>使用 <strong>Semaphore</strong> 确保数据库更新操作互斥访问。</li><li>使用带自定义命名线程的 <strong>线程池</strong> 提升异步执行效率，保证高并发环境稳定安全。</li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该 ID 生成服务设计巧妙结合了：</p><ul><li>本地缓存</li><li>高并发控制</li><li>异步刷新机制</li></ul><p>极大降低数据库压力，实现了高性能的分布式 ID 生成。<br>适合单实例或有限多实例部署场景，代码结构清晰，易于扩展和维护。</p><blockquote><p>理解和借鉴其设计思路，有助于构建稳定高效的分布式系统基础组件。</p></blockquote><p>—— <em>NowPion</em></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
      <tag>ID生成</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2025/10/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <url>/2025/10/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h1><p>这是我使用 <strong>Hexo</strong> 搭建的第一篇文章。<br>经过一番配置与调试，终于把这个博客跑起来了。<br>虽然只是一个简单的开始，但这对我来说，是一个新的起点。</p><hr><h2 id="为什么要写博客"><a href="#为什么要写博客" class="headerlink" title="为什么要写博客"></a>为什么要写博客</h2><p>主要有三个原因：</p><ol><li><p><strong>记录成长</strong>：<br>每一次解决问题、完成项目、或者偶然的灵感，都值得被记录下来。<br>写下来不仅能帮助自己复盘，也能帮助后来者少走弯路。</p></li><li><p><strong>整理思路</strong>：<br>当你尝试把知识写出来的时候，你会发现理解会更深。<br>写博客其实就是一种最好的学习方式。</p></li><li><p><strong>分享价值</strong>：<br>我相信知识是可以分享的。<br>如果我的文章能让某个人少查一点资料，那就很值得。</p></li></ol><hr><h2 id="我的技术方向"><a href="#我的技术方向" class="headerlink" title="我的技术方向"></a>我的技术方向</h2><p>目前主要学习和使用的技术包括：</p><ul><li>全栈开发：<code>convex</code></li><li>后端开发：<code>Spring Boot</code>、<code>Spring Cloud</code>、<code>Node.js</code></li><li>数据库：<code>MySQL</code>  、<code>Redis</code>、<code>Sql Server</code></li><li>前端框架：<code>Vue</code>、<code>Uniapp</code>、<code>微信小程序</code>  </li><li>部署：<code>Docker</code>、<code>Linux</code>  </li><li>AI开发工具：<code>Trea</code>、<code>Cursor</code></li><li>其他兴趣：物联网、数据分析、技术探索</li></ul><hr><h2 id="未来计划"><a href="#未来计划" class="headerlink" title="未来计划"></a>未来计划</h2><p>这个博客会陆续更新以下内容：</p><ul><li>项目实战笔记与技术总结  </li><li>编程与学习方法分享  </li><li>个人思考与生活记录</li></ul><p>希望能在这里不断成长，也期待遇见志同道合的朋友。</p><hr><h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><p>下面是我的联系方式：</p><ul><li>qq：3163443477</li><li>wx：dong17854000761  </li><li>邮箱：<a href="mailto:&#110;&#105;&#x65;&#122;&#x68;&#105;&#x64;&#x6f;&#110;&#103;&#49;&#x32;&#51;&#52;&#64;&#x67;&#109;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#109;">&#110;&#105;&#x65;&#122;&#x68;&#105;&#x64;&#x6f;&#110;&#103;&#49;&#x32;&#51;&#52;&#64;&#x67;&#109;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#109;</a></li></ul><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><blockquote><p>「记录让人成长，分享让世界变得更好。」</p></blockquote><p>感谢你能看到这里。<br>如果你也在搭建自己的博客，可以留言交流，我们一起进步。  </p><p>—— <em>NowPion</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>新起点</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
